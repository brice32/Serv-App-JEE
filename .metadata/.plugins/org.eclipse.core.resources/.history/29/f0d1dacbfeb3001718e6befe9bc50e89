package contacts.emb.dao.jpa;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;

import javax.persistence.EntityManager;

import contacts.emb.dao.IDaoCategorie;
import contacts.emb.data.Categorie;


public class DaoCategorie implements IDaoCategorie {

	
	// Champs

	private Map<Integer, Categorie> 	mapCategories;

    private EntityManager em;
	
	// Injecteurs
	
	public void setDonnees( Donnees donnees ) {
		mapCategories = donnees.getMapCategories();
	}
	
	public void setEntityManager( EntityManager em ) {
		this.em = em;
	}
	
	// Actions
	
	@Override
	public int inserer(Categorie categorie) {
		if ( mapCategories.isEmpty() ) {
			categorie.setId( 1 );
		} else {
			categorie.setId( Collections.max( mapCategories.keySet() ) + 1 );
		}
		mapCategories.put( categorie.getId(), categorie );
		return categorie.getId();
	}

	@Override
	public void modifier(Categorie categorie) {
		mapCategories.replace( categorie.getId(), categorie );
	}

	@Override
	public void supprimer(int idCategorie) {
		mapCategories.remove( idCategorie );
	}

	@Override
	public Categorie retrouver(int idCategorie) {
		return mapCategories.get( idCategorie );
	}

	@Override
	public List<Categorie> listerTout() {
//		return trierParLibelle( new ArrayList<>(mapCategories.values() ) );
		
	}

	
	// MÃ©thodes auxiliaires
    
    private List<Categorie> trierParLibelle( List<Categorie> liste ) {
		Collections.sort( liste,
	            (Comparator<Categorie>) ( item1, item2) -> {
	                return ( item1.getLibelle().toUpperCase().compareTo( item2.getLibelle().toUpperCase() ) );
			});
    	return liste;
    }
	
}
